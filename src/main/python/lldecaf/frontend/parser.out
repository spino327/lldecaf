Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    LBRACKET
    MINUS
    LONG
    PLUS
    ELLIPSIS
    GT
    ENUM
    PERIOD
    GE
    ICONST
    ARROW
    MINUSEQUAL
    TIMESEQUAL
    OR
    SHORT
    RETURN
    RSHIFTEQUAL
    STATIC
    SIZEOF
    FCONST
    UNSIGNED
    UNION
    COLON
    VOLATILE
    DIVIDE
    FOR
    PLUSPLUS
    EQUALS
    ELSE
    EQ
    AND
    TYPEID
    SIGNED
    CONTINUE
    NOT
    OREQUAL
    MOD
    RSHIFT
    DEFAULT
    CHAR
    WHILE
    DIVEQUAL
    EXTERN
    CASE
    LAND
    REGISTER
    MODEQUAL
    NE
    SWITCH
    PLUSEQUAL
    CONDOP
    BREAK
    ANDEQUAL
    DO
    LNOT
    CONST
    LOR
    LSHIFT
    GOTO
    LE
    LT
    CCONST
    TYPEDEF
    XOR
    AUTO
    TIMES
    MINUSMINUS
    IF
    STRUCT
    FLOAT
    XOREQUAL
    LSHIFTEQUAL
    RBRACKET

Grammar

Rule 0     S' -> Program
Rule 1     Program -> DeclList
Rule 2     DeclList -> DeclList Decl
Rule 3     DeclList -> Decl
Rule 4     Decl -> VarDec
Rule 5     Decl -> FuncDec
Rule 6     VarDec -> Var SEMI
Rule 7     Var -> Type ID
Rule 8     Type -> INT
Rule 9     Type -> DOUBLE
Rule 10    Type -> BOOL
Rule 11    Type -> STRING
Rule 12    Type -> ID
Rule 13    FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock
Rule 14    FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock
Rule 15    Formals -> Formals COMMA Var
Rule 16    Formals -> Var
Rule 17    Formals -> Empty
Rule 18    StmtBlock -> LBRACE VarDecList StmtList RBRACE
Rule 19    VarDecList -> VarDecList VarDec
Rule 20    VarDecList -> Empty
Rule 21    StmtList -> Stmt StmtList
Rule 22    StmtList -> Empty
Rule 23    Stmt -> PrintStmt
Rule 24    PrintStmt -> PRINT LPAREN SCONST RPAREN SEMI
Rule 25    Empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ANDEQUAL             : 
ARROW                : 
AUTO                 : 
BOOL                 : 10
BREAK                : 
CASE                 : 
CCONST               : 
CHAR                 : 
COLON                : 
COMMA                : 15
CONDOP               : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DIVEQUAL             : 
DIVIDE               : 
DO                   : 
DOUBLE               : 9
ELLIPSIS             : 
ELSE                 : 
ENUM                 : 
EQ                   : 
EQUALS               : 
EXTERN               : 
FCONST               : 
FLOAT                : 
FOR                  : 
GE                   : 
GOTO                 : 
GT                   : 
ICONST               : 
ID                   : 7 12 13 14
IF                   : 
INT                  : 8
LAND                 : 
LBRACE               : 18
LBRACKET             : 
LE                   : 
LNOT                 : 
LONG                 : 
LOR                  : 
LPAREN               : 13 14 24
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 
MINUS                : 
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
MODEQUAL             : 
NE                   : 
NOT                  : 
OR                   : 
OREQUAL              : 
PERIOD               : 
PLUS                 : 
PLUSEQUAL            : 
PLUSPLUS             : 
PRINT                : 24
RBRACE               : 18
RBRACKET             : 
REGISTER             : 
RETURN               : 
RPAREN               : 13 14 24
RSHIFT               : 
RSHIFTEQUAL          : 
SCONST               : 24
SEMI                 : 6 24
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 11
STRUCT               : 
SWITCH               : 
TIMES                : 
TIMESEQUAL           : 
TYPEDEF              : 
TYPEID               : 
UNION                : 
UNSIGNED             : 
VOID                 : 14
VOLATILE             : 
WHILE                : 
XOR                  : 
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

Decl                 : 2 3
DeclList             : 1 2
Empty                : 17 20 22
Formals              : 13 14 15
FuncDec              : 5
PrintStmt            : 23
Program              : 0
Stmt                 : 21
StmtBlock            : 13 14
StmtList             : 18 21
Type                 : 7 13
Var                  : 6 15 16
VarDec               : 4 19
VarDecList           : 18 19

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . DeclList
    (2) DeclList -> . DeclList Decl
    (3) DeclList -> . Decl
    (4) Decl -> . VarDec
    (5) Decl -> . FuncDec
    (6) VarDec -> . Var SEMI
    (13) FuncDec -> . Type ID LPAREN Formals RPAREN StmtBlock
    (14) FuncDec -> . VOID ID LPAREN Formals RPAREN StmtBlock
    (7) Var -> . Type ID
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    VOID            shift and go to state 6
    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    Decl                           shift and go to state 1
    DeclList                       shift and go to state 2
    VarDec                         shift and go to state 7
    Program                        shift and go to state 9
    Var                            shift and go to state 11
    Type                           shift and go to state 12
    FuncDec                        shift and go to state 13

state 1

    (3) DeclList -> Decl .

    VOID            reduce using rule 3 (DeclList -> Decl .)
    INT             reduce using rule 3 (DeclList -> Decl .)
    DOUBLE          reduce using rule 3 (DeclList -> Decl .)
    BOOL            reduce using rule 3 (DeclList -> Decl .)
    STRING          reduce using rule 3 (DeclList -> Decl .)
    ID              reduce using rule 3 (DeclList -> Decl .)
    $end            reduce using rule 3 (DeclList -> Decl .)


state 2

    (1) Program -> DeclList .
    (2) DeclList -> DeclList . Decl
    (4) Decl -> . VarDec
    (5) Decl -> . FuncDec
    (6) VarDec -> . Var SEMI
    (13) FuncDec -> . Type ID LPAREN Formals RPAREN StmtBlock
    (14) FuncDec -> . VOID ID LPAREN Formals RPAREN StmtBlock
    (7) Var -> . Type ID
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    $end            reduce using rule 1 (Program -> DeclList .)
    VOID            shift and go to state 6
    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    Decl                           shift and go to state 14
    VarDec                         shift and go to state 7
    Var                            shift and go to state 11
    Type                           shift and go to state 12
    FuncDec                        shift and go to state 13

state 3

    (11) Type -> STRING .

    ID              reduce using rule 11 (Type -> STRING .)


state 4

    (8) Type -> INT .

    ID              reduce using rule 8 (Type -> INT .)


state 5

    (9) Type -> DOUBLE .

    ID              reduce using rule 9 (Type -> DOUBLE .)


state 6

    (14) FuncDec -> VOID . ID LPAREN Formals RPAREN StmtBlock

    ID              shift and go to state 15


state 7

    (4) Decl -> VarDec .

    VOID            reduce using rule 4 (Decl -> VarDec .)
    INT             reduce using rule 4 (Decl -> VarDec .)
    DOUBLE          reduce using rule 4 (Decl -> VarDec .)
    BOOL            reduce using rule 4 (Decl -> VarDec .)
    STRING          reduce using rule 4 (Decl -> VarDec .)
    ID              reduce using rule 4 (Decl -> VarDec .)
    $end            reduce using rule 4 (Decl -> VarDec .)


state 8

    (12) Type -> ID .

    ID              reduce using rule 12 (Type -> ID .)


state 9

    (0) S' -> Program .



state 10

    (10) Type -> BOOL .

    ID              reduce using rule 10 (Type -> BOOL .)


state 11

    (6) VarDec -> Var . SEMI

    SEMI            shift and go to state 16


state 12

    (13) FuncDec -> Type . ID LPAREN Formals RPAREN StmtBlock
    (7) Var -> Type . ID

    ID              shift and go to state 17


state 13

    (5) Decl -> FuncDec .

    VOID            reduce using rule 5 (Decl -> FuncDec .)
    INT             reduce using rule 5 (Decl -> FuncDec .)
    DOUBLE          reduce using rule 5 (Decl -> FuncDec .)
    BOOL            reduce using rule 5 (Decl -> FuncDec .)
    STRING          reduce using rule 5 (Decl -> FuncDec .)
    ID              reduce using rule 5 (Decl -> FuncDec .)
    $end            reduce using rule 5 (Decl -> FuncDec .)


state 14

    (2) DeclList -> DeclList Decl .

    VOID            reduce using rule 2 (DeclList -> DeclList Decl .)
    INT             reduce using rule 2 (DeclList -> DeclList Decl .)
    DOUBLE          reduce using rule 2 (DeclList -> DeclList Decl .)
    BOOL            reduce using rule 2 (DeclList -> DeclList Decl .)
    STRING          reduce using rule 2 (DeclList -> DeclList Decl .)
    ID              reduce using rule 2 (DeclList -> DeclList Decl .)
    $end            reduce using rule 2 (DeclList -> DeclList Decl .)


state 15

    (14) FuncDec -> VOID ID . LPAREN Formals RPAREN StmtBlock

    LPAREN          shift and go to state 18


state 16

    (6) VarDec -> Var SEMI .

    VOID            reduce using rule 6 (VarDec -> Var SEMI .)
    INT             reduce using rule 6 (VarDec -> Var SEMI .)
    DOUBLE          reduce using rule 6 (VarDec -> Var SEMI .)
    BOOL            reduce using rule 6 (VarDec -> Var SEMI .)
    STRING          reduce using rule 6 (VarDec -> Var SEMI .)
    ID              reduce using rule 6 (VarDec -> Var SEMI .)
    $end            reduce using rule 6 (VarDec -> Var SEMI .)
    PRINT           reduce using rule 6 (VarDec -> Var SEMI .)
    RBRACE          reduce using rule 6 (VarDec -> Var SEMI .)


state 17

    (13) FuncDec -> Type ID . LPAREN Formals RPAREN StmtBlock
    (7) Var -> Type ID .

    LPAREN          shift and go to state 19
    SEMI            reduce using rule 7 (Var -> Type ID .)


state 18

    (14) FuncDec -> VOID ID LPAREN . Formals RPAREN StmtBlock
    (15) Formals -> . Formals COMMA Var
    (16) Formals -> . Var
    (17) Formals -> . Empty
    (7) Var -> . Type ID
    (25) Empty -> .
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    RPAREN          reduce using rule 25 (Empty -> .)
    COMMA           reduce using rule 25 (Empty -> .)
    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    Var                            shift and go to state 20
    Type                           shift and go to state 21
    Empty                          shift and go to state 22
    Formals                        shift and go to state 23

state 19

    (13) FuncDec -> Type ID LPAREN . Formals RPAREN StmtBlock
    (15) Formals -> . Formals COMMA Var
    (16) Formals -> . Var
    (17) Formals -> . Empty
    (7) Var -> . Type ID
    (25) Empty -> .
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    RPAREN          reduce using rule 25 (Empty -> .)
    COMMA           reduce using rule 25 (Empty -> .)
    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    Var                            shift and go to state 20
    Type                           shift and go to state 21
    Empty                          shift and go to state 22
    Formals                        shift and go to state 24

state 20

    (16) Formals -> Var .

    RPAREN          reduce using rule 16 (Formals -> Var .)
    COMMA           reduce using rule 16 (Formals -> Var .)


state 21

    (7) Var -> Type . ID

    ID              shift and go to state 25


state 22

    (17) Formals -> Empty .

    RPAREN          reduce using rule 17 (Formals -> Empty .)
    COMMA           reduce using rule 17 (Formals -> Empty .)


state 23

    (14) FuncDec -> VOID ID LPAREN Formals . RPAREN StmtBlock
    (15) Formals -> Formals . COMMA Var

    RPAREN          shift and go to state 26
    COMMA           shift and go to state 27


state 24

    (13) FuncDec -> Type ID LPAREN Formals . RPAREN StmtBlock
    (15) Formals -> Formals . COMMA Var

    RPAREN          shift and go to state 28
    COMMA           shift and go to state 27


state 25

    (7) Var -> Type ID .

    RPAREN          reduce using rule 7 (Var -> Type ID .)
    COMMA           reduce using rule 7 (Var -> Type ID .)
    SEMI            reduce using rule 7 (Var -> Type ID .)


state 26

    (14) FuncDec -> VOID ID LPAREN Formals RPAREN . StmtBlock
    (18) StmtBlock -> . LBRACE VarDecList StmtList RBRACE

    LBRACE          shift and go to state 30

    StmtBlock                      shift and go to state 29

state 27

    (15) Formals -> Formals COMMA . Var
    (7) Var -> . Type ID
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    Var                            shift and go to state 31
    Type                           shift and go to state 21

state 28

    (13) FuncDec -> Type ID LPAREN Formals RPAREN . StmtBlock
    (18) StmtBlock -> . LBRACE VarDecList StmtList RBRACE

    LBRACE          shift and go to state 30

    StmtBlock                      shift and go to state 32

state 29

    (14) FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .

    VOID            reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    INT             reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    DOUBLE          reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    BOOL            reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    STRING          reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    ID              reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)
    $end            reduce using rule 14 (FuncDec -> VOID ID LPAREN Formals RPAREN StmtBlock .)


state 30

    (18) StmtBlock -> LBRACE . VarDecList StmtList RBRACE
    (19) VarDecList -> . VarDecList VarDec
    (20) VarDecList -> . Empty
    (25) Empty -> .

    PRINT           reduce using rule 25 (Empty -> .)
    INT             reduce using rule 25 (Empty -> .)
    DOUBLE          reduce using rule 25 (Empty -> .)
    BOOL            reduce using rule 25 (Empty -> .)
    STRING          reduce using rule 25 (Empty -> .)
    ID              reduce using rule 25 (Empty -> .)
    RBRACE          reduce using rule 25 (Empty -> .)

    Empty                          shift and go to state 33
    VarDecList                     shift and go to state 34

state 31

    (15) Formals -> Formals COMMA Var .

    RPAREN          reduce using rule 15 (Formals -> Formals COMMA Var .)
    COMMA           reduce using rule 15 (Formals -> Formals COMMA Var .)


state 32

    (13) FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .

    VOID            reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    INT             reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    DOUBLE          reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    BOOL            reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    STRING          reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    ID              reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)
    $end            reduce using rule 13 (FuncDec -> Type ID LPAREN Formals RPAREN StmtBlock .)


state 33

    (20) VarDecList -> Empty .

    PRINT           reduce using rule 20 (VarDecList -> Empty .)
    INT             reduce using rule 20 (VarDecList -> Empty .)
    DOUBLE          reduce using rule 20 (VarDecList -> Empty .)
    BOOL            reduce using rule 20 (VarDecList -> Empty .)
    STRING          reduce using rule 20 (VarDecList -> Empty .)
    ID              reduce using rule 20 (VarDecList -> Empty .)
    RBRACE          reduce using rule 20 (VarDecList -> Empty .)


state 34

    (18) StmtBlock -> LBRACE VarDecList . StmtList RBRACE
    (19) VarDecList -> VarDecList . VarDec
    (21) StmtList -> . Stmt StmtList
    (22) StmtList -> . Empty
    (6) VarDec -> . Var SEMI
    (23) Stmt -> . PrintStmt
    (25) Empty -> .
    (7) Var -> . Type ID
    (24) PrintStmt -> . PRINT LPAREN SCONST RPAREN SEMI
    (8) Type -> . INT
    (9) Type -> . DOUBLE
    (10) Type -> . BOOL
    (11) Type -> . STRING
    (12) Type -> . ID

    RBRACE          reduce using rule 25 (Empty -> .)
    PRINT           shift and go to state 37
    INT             shift and go to state 4
    DOUBLE          shift and go to state 5
    BOOL            shift and go to state 10
    STRING          shift and go to state 3
    ID              shift and go to state 8

    VarDec                         shift and go to state 35
    Stmt                           shift and go to state 36
    PrintStmt                      shift and go to state 38
    StmtList                       shift and go to state 39
    Var                            shift and go to state 11
    Type                           shift and go to state 21
    Empty                          shift and go to state 40

state 35

    (19) VarDecList -> VarDecList VarDec .

    PRINT           reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    INT             reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    DOUBLE          reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    BOOL            reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    STRING          reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    ID              reduce using rule 19 (VarDecList -> VarDecList VarDec .)
    RBRACE          reduce using rule 19 (VarDecList -> VarDecList VarDec .)


state 36

    (21) StmtList -> Stmt . StmtList
    (21) StmtList -> . Stmt StmtList
    (22) StmtList -> . Empty
    (23) Stmt -> . PrintStmt
    (25) Empty -> .
    (24) PrintStmt -> . PRINT LPAREN SCONST RPAREN SEMI

    RBRACE          reduce using rule 25 (Empty -> .)
    PRINT           shift and go to state 37

    Empty                          shift and go to state 40
    PrintStmt                      shift and go to state 38
    StmtList                       shift and go to state 41
    Stmt                           shift and go to state 36

state 37

    (24) PrintStmt -> PRINT . LPAREN SCONST RPAREN SEMI

    LPAREN          shift and go to state 42


state 38

    (23) Stmt -> PrintStmt .

    PRINT           reduce using rule 23 (Stmt -> PrintStmt .)
    RBRACE          reduce using rule 23 (Stmt -> PrintStmt .)


state 39

    (18) StmtBlock -> LBRACE VarDecList StmtList . RBRACE

    RBRACE          shift and go to state 43


state 40

    (22) StmtList -> Empty .

    RBRACE          reduce using rule 22 (StmtList -> Empty .)


state 41

    (21) StmtList -> Stmt StmtList .

    RBRACE          reduce using rule 21 (StmtList -> Stmt StmtList .)


state 42

    (24) PrintStmt -> PRINT LPAREN . SCONST RPAREN SEMI

    SCONST          shift and go to state 44


state 43

    (18) StmtBlock -> LBRACE VarDecList StmtList RBRACE .

    VOID            reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    INT             reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    DOUBLE          reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    BOOL            reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    STRING          reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    ID              reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)
    $end            reduce using rule 18 (StmtBlock -> LBRACE VarDecList StmtList RBRACE .)


state 44

    (24) PrintStmt -> PRINT LPAREN SCONST . RPAREN SEMI

    RPAREN          shift and go to state 45


state 45

    (24) PrintStmt -> PRINT LPAREN SCONST RPAREN . SEMI

    SEMI            shift and go to state 46


state 46

    (24) PrintStmt -> PRINT LPAREN SCONST RPAREN SEMI .

    PRINT           reduce using rule 24 (PrintStmt -> PRINT LPAREN SCONST RPAREN SEMI .)
    RBRACE          reduce using rule 24 (PrintStmt -> PRINT LPAREN SCONST RPAREN SEMI .)

